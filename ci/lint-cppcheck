#!/bin/bash
OTHER_OPTIONS=$1

# -- variables definitions for cppcheck
CPPBASEOPTIONS="--error-exitcode=0 --inconclusive --enable=all --force"

CPPDEFINES="-DKARABO_CLASSINFO  -DKARABO_REGISTER_FOR_CONFIGURATION"
CPPUNDEFINES="-UKARABO_ENABLE_TRACE_LOG -UKARABO_IO_TRACE -UKARABO_USE_PROFILER_SCALARFILTERBUFFER1 "
CPPUNDEFINES+="-U_MSC_VER -U__DLL__ -U__CYGWIN__ -U__sun -Usun "
CPPUNDEFINES+="-U__DragonFly__ -U__FreeBSD__ -U__NetBSD__ -U__OpenBSD__ "
CPPUNDEFINES+="-U__MACOSX__ -UBSD -U__APPLE__ -U__unix -U__unix__ -Uunix "
CPPUNDEFINES+="-U__SO__ -U__sgi -Usgi -U__GNUC__ -U__GLIBC__ -U__linux -Ulinux "

# -- functions definitions

__run_lint_command() {
    command="time $1"
    echo $command
    eval $command
    local status=$?
    if [[ $status != 0 ]]; then
        echo "Exited with error:$status"
        exit $status
    fi
}

__lint_cppcheck() {
    SCANNEDFOLDER="$CI_PROJECT_DIR/src"
    CPPCHECKOPTIONS="$CPPUNDEFINES $CPPDEFINES $CPPBASEOPTIONS -I$SCANNEDFOLDER"
    # TODO: set --error-exitcode=1 to make it blocking
    __run_lint_command "cppcheck $CPPCHECKOPTIONS $OTHER_OPTIONS $SCANNEDFOLDER"
}


# -- main
# if not run in the gitlab CI environment, one must set this env. variable.
if [ "$CI_PROJECT_DIR" = "" ]; then
    export CI_PROJECT_DIR=$(echo $(git rev-parse --show-toplevel))
else
    # call manually if not CI:
    # if non-CI it causes a warning: Could not find conda environment
    source activate && conda activate
fi

echo "cppcheck scan started."
__lint_cppcheck
echo "cppcheck scan complete."
