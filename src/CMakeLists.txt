add_library (
    ${CMAKE_PROJECT_NAME} SHARED
)

find_package(Threads REQUIRED)
find_package(OpenCV REQUIRED)

set(TARGET_HEADERS
    CameraImageSource.hh
    ImageSource.hh
    version.hh
)

target_sources(
    ${CMAKE_PROJECT_NAME}
    PRIVATE

    # Add any other source file in here.
    CameraImageSource.cc
    ImageSource.cc
    Scene.cc

    # For shortcomings about using file(GLOB ..) to gather source files, please
    # see https://stackoverflow.com/questions/32411963/why-is-cmake-file-glob-evil.
)

target_compile_options(
    ${CMAKE_PROJECT_NAME}
    PUBLIC -Wfatal-errors -Wno-unused-local-typedefs
           -Wno-deprecated-declarations -Wall)

target_include_directories(
    ${CMAKE_PROJECT_NAME} SYSTEM
    PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}
 )

target_link_libraries(
    ${CMAKE_PROJECT_NAME}
    PUBLIC
    Threads::Threads
    ${KARABO_LIB_TARGET_NAME}
    opencv::opencv_core_alias
    opencv::opencv_imgproc_alias
)

# Finds Git - it will be used by the custom command that generates version.hh
# A successful find_package for Git, sets the variable GIT_EXECUTABLE with the
# absolute path to the Git CLI on the local system.
find_package(Git REQUIRED)

# Generates the version.hh for the device whenever there is an update to the
# .git directory that might have been caused by a device version change and that
# update is newer than the current version.hh file.
set(GIT_REPO_PRIV_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../.git)
set(VERSION_HEADER ${CMAKE_CURRENT_SOURCE_DIR}/version.hh)
string(TOUPPER ${CMAKE_PROJECT_NAME} PROJECT_NAME_UPPER)

add_custom_command(
    OUTPUT ${VERSION_HEADER}
    COMMAND echo "// WARNING: This file is auto generated by the Makefile." > ${VERSION_HEADER}
    COMMAND echo "#ifndef ${PROJECT_NAME_UPPER}_PACKAGE_VERSION" >> ${VERSION_HEADER}
    COMMAND echo -n "#define ${PROJECT_NAME_UPPER}_PACKAGE_VERSION \"${CMAKE_PROJECT_NAME}-" >> ${VERSION_HEADER}
    COMMAND ${GIT_EXECUTABLE} describe --tags --match "*.*.*" --dirty --always | tr -d "\\n" >> ${VERSION_HEADER}
    COMMAND echo "\"" >> ${VERSION_HEADER}
    COMMAND echo "#endif" >> ${VERSION_HEADER}
    VERBATIM
    DEPENDS ${GIT_REPO_PRIV_DIR}/HEAD ${GIT_REPO_PRIV_DIR}/refs/tags
)

add_custom_target(
    UpdateVersionHeader ALL
    DEPENDS ${VERSION_HEADER}
)

add_dependencies(${CMAKE_PROJECT_NAME} UpdateVersionHeader)

# install public header files
set_target_properties(
    ${CMAKE_PROJECT_NAME}
    PROPERTIES PUBLIC_HEADER "${TARGET_HEADERS}")

# install the target (library files)
install(TARGETS ${CMAKE_PROJECT_NAME}
    LIBRARY DESTINATION "plugins"
    PUBLIC_HEADER DESTINATION "include/image_source")

if (BUILD_TESTS)

    enable_testing()

    add_executable(
       test-${CMAKE_PROJECT_NAME}
       test/testrunner.cc   # The test runner entry point
       test/testImageSource.cc
       # Add any other source file in here.

    )

    include("../cmake/find_dep.cmake")
    find_dep(gtest gtest)

    target_compile_options(
        test-${CMAKE_PROJECT_NAME}
        PUBLIC -Wfatal-errors -Wno-unused-local-typedefs
               -Wno-deprecated-declarations -Wall)

    target_link_libraries(
        test-${CMAKE_PROJECT_NAME}
        PRIVATE
        Threads::Threads
        ${KARABO_LIB_TARGET_NAME}
        ${CMAKE_PROJECT_NAME}
        ${gtest_LIB}
    )

    add_test(NAME ${CMAKE_PROJECT_NAME}Tests COMMAND test-${CMAKE_PROJECT_NAME})

endif()
