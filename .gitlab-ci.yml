stages:
  - lint
  - build

.test_build_template: &test_build
  stage: build
  script:
    - export REL_OS_NAME=$(lsb_release -is)
    - export REL_OS_VERS_LONG=$(lsb_release -rs | sed -r "s/^([0-9]+).*/\1/")
    - export REL_PROJECT_NAME=$CI_PROJECT_NAME
    - export REL_TAG=$CI_BUILD_REF_NAME
    - export KARABO_TAG="latest_build"
    - curl http://exflserv05.desy.de/karabo/karaboFramework/tags/$KARABO_TAG/karabo-$KARABO_TAG-Release-$REL_OS_NAME-$REL_OS_VERS_LONG-x86_64.sh > karabo.sh
    - bash karabo.sh --prefix=/root
    - source /root/karabo/activate
    - export KARABO_BROKER_TOPIC="gitlab_ci_$CI_JOB_ID"
    - pushd $CI_PROJECT_DIR
    - karabo -g https://$XFEL_TOKEN@git.xfel.eu install $REL_PROJECT_NAME $REL_TAG
    - export NUM_JOBS=$(grep "processor" /proc/cpuinfo | wc -l)
    - make -j$NUM_JOBS build CONF=Release
    - export GTEST_OUTPUT=xml:$CI_PROJECT_DIR/report.xml
    - make test CONF=Release
    - nosetests src/test/
  only:
    - branches
  except:
    - master
  artifacts:
    when: always
    reports:
      junit: report.xml

##### Static source code analysis #####
lint:
  stage: lint
  image: europeanxfel/karabo-ci:miniconda-3lint
  script:
    - git clone https://$XFEL_TOKEN@git.xfel.eu/Karabo/linter-tools.git ci
    - source ci/lint-cppcheck.sh

##### Static source code analysis #####
lint-clang-tidy:
  stage: lint
  image: europeanxfel/karabo-ci:miniconda-3lint
  script:
    - git clone https://$XFEL_TOKEN@git.xfel.eu/Karabo/linter-tools.git ci
    - source ci/lint-clang-tidy.sh

##### Test build #####
test:ubuntu18:
  image: europeanxfel/karabo-ci:ubuntu-18
  <<: *test_build

test:ubuntu20:
  image: europeanxfel/karabo-ci:ubuntu-20
  <<: *test_build

test:centos7:
  image: europeanxfel/karabo-ci:centos-7gcc7
  before_script:
    - source /opt/rh/devtoolset-7/enable
  <<: *test_build
